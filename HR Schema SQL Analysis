# Oracle HR Schema SQL Analysis

A comprehensive collection of SQL queries for analyzing the Oracle HR sample schema, demonstrating various SQL concepts including JOINs, aggregate functions, and data analysis techniques.

## üóÉÔ∏è Schema Overview
The Oracle HR schema contains several related tables:
- `EMPLOYEES`: Employee information including salary and hire dates
- `DEPARTMENTS`: Department details
- `JOBS`: Job titles and salary ranges
- `LOCATIONS`: Office locations
- `COUNTRIES`: Country information

## üìä Query Categories

### 1. Department Analysis
```sql
-- List all IT related departments without managers
SELECT 
  d.department_name
FROM departments d
LEFT JOIN employees e ON d.department_id = e.department_id 
  AND e.job_id = (SELECT job_id FROM jobs WHERE job_title = 'Manager')
WHERE d.department_name LIKE '%IT%'
  AND e.employee_id IS NULL
ORDER BY d.department_name;
```

### 2. Employee Salary Analysis
```sql
-- Display salary difference from minimum job salary
CREATE OR REPLACE VIEW employee_job_salary AS
SELECT
  e.employee_id,
  e.first_name || ' ' || last_name AS employee_name,
  j.job_title,
  e.salary,
  j.min_salary,
  (e.salary - j.min_salary) AS salary_difference
FROM employees e
JOIN jobs j ON e.job_id = j.job_id;
```

### 3. Location-Based Analysis
```sql
-- Find employees working in London
SELECT
  e.first_name,
  e.last_name,
  d.department_name,
  e.job_id,
  e.salary
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE l.city = 'London';
```

### 4. Management Hierarchy
```sql
-- Department and Manager details
SELECT
  d.department_id,
  d.department_name,
  e.employee_id AS manager_id,
  e.first_name AS manager_first_name
FROM departments d
LEFT JOIN employees e ON d.manager_id = e.employee_id;
```

## üìà Analysis Features

### Salary Market Correction
```sql
WITH employee_job_details AS (
  SELECT
    e.employee_id,
    e.first_name,
    e.last_name,
    d.department_name,
    FLOOR(DATEDIFF(CURDATE(), e.hire_date) / 365) AS years_experience,
    e.salary AS current_salary,
    j.max_salary,
    CASE
      WHEN (e.salary - j.min_salary) > (e.salary * 0.3) 
      THEN e.salary * 1.3
      ELSE e.salary
    END AS incremented_salary
  FROM employees e
  JOIN jobs j ON e.job_id = j.job_id
  JOIN departments d ON e.department_id = d.department_id
)
SELECT * FROM employee_job_details
ORDER BY salary_difference DESC;
```

## üë• Manager Category Analysis
```sql
-- Count of managers vs non-managers
SELECT COUNT(*) AS manager_count
FROM employees
WHERE job_id IN (
  SELECT job_id 
  FROM jobs
  WHERE job_title IN ('President', 'Manager', 'Vice President')
);
```

## üõ†Ô∏è Prerequisites
- Access to Oracle Database with HR schema
- SQL client (SQL*Plus, DBeaver, etc.)
- Basic understanding of SQL concepts

## üìù Usage Tips
1. Always test queries on a development database first
2. Use appropriate indexes for better performance
3. Consider using views for complex, frequently-used queries
4. Pay attention to joins and their impact on result sets

## üîç Example Data Analysis

### Employee Years of Service
```sql
SELECT
  e.first_name,
  e.last_name,
  FLOOR(DATEDIFF(CURDATE(), e.hire_date) / 365) AS years_of_service
FROM employees e;
```
- [Oracle HR Schema Documentation](https://docs.oracle.com/en/database/oracle/oracle-database/19/comsc/HR-sample-schema.html)
- [Oracle SQL Reference](https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/index.html)

